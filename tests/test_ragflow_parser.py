import pytest
import os
from llama_index.core import Document
from llama_index.core.node_parser import SentenceSplitter
from llama_index.core.ingestion import IngestionPipeline
from llama_index.core import SimpleDirectoryReader
from llamasearch.Ragflow import RagflowNodeParser  # Replace with actual import

# class TestResultPrinter:
#     @staticmethod
#     def print_test_result(test_name: str, nodes):
#         print(f"\n{'=' * 80}")
#         print(f"Test: {test_name}")
#         print(f"{'-' * 80}")
#         for node in nodes:
#             print(f"Node: {node.text}")
#         print(f"{'=' * 80}\n")

class TestRagflowNodeParser:
    @pytest.fixture(autouse=True)
    def setup_parser(self):
        self.parser = RagflowNodeParser()

    def test_ragflow_parser(self):
        pipeline = IngestionPipeline(
            transformations=[self.parser]
        )
        documents = SimpleDirectoryReader("data/test_docs/", filename_as_id=True).load_data()
        print(documents)
        nodes = pipeline.run(documents=documents)

        # Assert that nodes were generated
        assert nodes is not None, "No nodes were generated by the pipeline"
        assert len(nodes) > 0, "The pipeline generated an empty list of nodes"

        # Optional: print the test result
     

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
